// YCLID UTM Tracker –¥–ª—è Google Tag Manager (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
(function() {
    'use strict';
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookie
    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + encodeURIComponent(value) + expires + "; path=/";
        console.log('üç™ ECLID Tracker: Cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', name, '=', value);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cookie
    function getCookie(name) {
        var matches = document.cookie.match(new RegExp(
            "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\\\/\+\^])/g, '\\$1') + "=([^;]*)"
        ));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ URL
    function getUrlParam(param) {
        var search = window.location.search;
        if (!search) return null;
        
        var params = search.substring(1).split('&');
        for (var i = 0; i < params.length; i++) {
            var pair = params[i].split('=');
            if (pair[0] === param) {
                return pair[1] ? decodeURIComponent(pair[1]) : '';
            }
        }
        return null;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
    function getAllLinks() {
        return document.querySelectorAll ? document.querySelectorAll('a[href]') : 
               document.getElementsByTagName('a');
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫ URL —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    function addParamsToUrl(url, params) {
        if (!url || !params) return url;
        
        try {
            var urlObj = new URL(url);
            var searchParams = urlObj.searchParams || new URLSearchParams(urlObj.search);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç –≤ URL
            Object.keys(params).forEach(function(key) {
                if (!searchParams.has(key)) {
                    searchParams.set(key, params[key]);
                }
            });
            
            // –°–æ–±–∏—Ä–∞–µ–º URL –æ–±—Ä–∞—Ç–Ω–æ
            urlObj.search = searchParams.toString();
            return urlObj.toString();
            
        } catch(e) {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö URL
            var separator = url.indexOf('?') === -1 ? '?' : '&';
            var paramsStr = Object.keys(params).map(function(key) {
                return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
            }).join('&');
            
            return url + separator + paramsStr;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    function processLinks(paramsToAdd) {
        var allLinks = getAllLinks();
        var thmPageRegex = /^https?:\/\/(www\.)?thm\.page/i;
        var processedCount = 0;
        
        console.log('üîç ECLID Tracker: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫, –Ω–∞–π–¥–µ–Ω–æ:', allLinks.length);
        
        for (var i = 0; i < allLinks.length; i++) {
            try {
                var link = allLinks[i];
                if (link.href && thmPageRegex.test(link.href)) {
                    console.log('üéØ ECLID Tracker: –ù–∞–π–¥–µ–Ω–∞ THM.page —Å—Å—ã–ª–∫–∞:', link.href);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                    if (!link.getAttribute('data-utm-processed')) {
                        var originalHref = link.href;
                        link.href = addParamsToUrl(link.href, paramsToAdd);
                        link.setAttribute('data-utm-processed', 'true');
                        processedCount++;
                        
                        console.log('‚úÖ ECLID Tracker: –°—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
                        console.log('   –ë—ã–ª–æ:', originalHref);
                        console.log('   –°—Ç–∞–ª–æ:', link.href);
                    } else {
                        console.log('‚ÑπÔ∏è ECLID Tracker: –°—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
                    }
                }
            } catch(e) {
                console.error('‚ùå ECLID Tracker: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏:', e);
            }
        }
        
        console.log('‚úÖ ECLID Tracker: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ' + processedCount + ' —Å—Å—ã–ª–æ–∫ THM.page');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
    function observeDOM(paramsToAdd) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏
        processLinks(paramsToAdd);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MutationObserver –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫
        if (window.MutationObserver) {
            var observer = new MutationObserver(function(mutations) {
                var shouldProcess = false;
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                        for (var i = 0; i < mutation.addedNodes.length; i++) {
                            var node = mutation.addedNodes[i];
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç (nodeType === 1)
                            if (node.nodeType === 1) {
                                if (node.tagName === 'A' || (node.querySelector && node.querySelector('a'))) {
                                    shouldProcess = true;
                                    console.log('üîÑ ECLID Tracker: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –≤ DOM');
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (shouldProcess) {
                    processLinks(paramsToAdd);
                }
            });
            
            // –ñ–¥–µ–º, –ø–æ–∫–∞ body –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            function startObserver() {
                if (document.body) {
                    observer.observe(document.body, {
                        childList: true,
                        subtree: true
                    });
                    console.log('üëÅÔ∏è ECLID Tracker: MutationObserver –∑–∞–ø—É—â–µ–Ω');
                } else {
                    setTimeout(startObserver, 100);
                }
            }
            startObserver();
        }
        // Fallback: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        else {
            console.log('‚ö†Ô∏è ECLID Tracker: MutationObserver –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback');
            setInterval(function() {
                processLinks(paramsToAdd);
            }, 2000);
        }
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    function initTracker() {
        try {
            console.log('üöÄ ECLID Tracker: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º yclid –∏–∑ URL –≤ cookie
            var yclid = getUrlParam('yclid');
            if (yclid) {
                setCookie('yclid', yclid, 365);
                console.log('‚úÖ ECLID Tracker: YCLID —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', yclid);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL –≤ cookies
            var utmParams = ['utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term'];
            utmParams.forEach(function(param) {
                var value = getUrlParam(param);
                if (value) {
                    setCookie(param, value, 365);
                    console.log('‚úÖ ECLID Tracker: UTM –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', param, '=', value);
                }
            });
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            var paramsToAdd = {};
            var savedYclid = getCookie('yclid');
            if (savedYclid) {
                paramsToAdd.yclid = savedYclid;
                console.log('üìñ ECLID Tracker: YCLID –∏–∑ cookies:', savedYclid);
            }
            
            utmParams.forEach(function(param) {
                var value = getCookie(param);
                if (value) {
                    paramsToAdd[param] = value;
                    console.log('üìñ ECLID Tracker: UTM –∏–∑ cookies:', param, '=', value);
                }
            });
            
            console.log('üîß ECLID Tracker: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', paramsToAdd);
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è - –≤—ã—Ö–æ–¥–∏–º
            if (Object.keys(paramsToAdd).length === 0) {
                console.log('‚ö†Ô∏è ECLID Tracker: –ù–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
                return;
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å—Å—ã–ª–∫–∞–º–∏
            observeDOM(paramsToAdd);
            console.log('‚úÖ ECLID Tracker: –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å—Å—ã–ª–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå ECLID Tracker: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.initTracker = initTracker;
    window.eclid = {
        setCookie: setCookie,
        getCookie: getCookie,
        getUrlParam: getUrlParam,
        processLinks: processLinks,
        addParamsToUrl: addParamsToUrl
    };

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
        if (document.addEventListener) {
            document.addEventListener('DOMContentLoaded', initTracker);
        } else if (document.attachEvent) {
            document.attachEvent('onreadystatechange', function() {
                if (document.readyState === 'complete') initTracker();
            });
        }
    } else {
        initTracker();
    }
})();
